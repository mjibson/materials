.materials(@light; @dark);

.materials(@light; @dark) when (@default = light) {
	.all(@light; @dark; dark);
}

.materials(@light; @dark) when (@default = dark) {
	.all(@dark; @light; light);
}

.all(@primary; @secondary; @secondary-scheme) {
	.root(@primary);
	@media (prefers-color-scheme: @secondary-scheme) {
		.root(@secondary);
	}
}

.root(@colors) {
	:root {
		.colors(@colors);
	}
}

.colors(@colors) {
	--primary: @colors[primary];
	--variant: @colors[variant];
	--secondary: @colors[secondary];
	--secondary-variant: @colors[secondary-variant];
	--background: @colors[background];
	--surface: @colors[surface];
	--error: @colors[error];
	--on-primary: @colors[on-primary];
	--on-secondary: @colors[on-secondary];
	--on-background: @colors[on-background];
	--on-surface: @colors[on-surface];
	--on-error: @colors[on-error];

	.dp(@colors[on-surface]);
	.emph(@colors[on-surface]);
}

.dp(@color) {
	--dp00: rgba(@color, 0);
	--dp01: rgba(@color, 0.05);
	--dp02: rgba(@color, 0.07);
	--dp03: rgba(@color, 0.08);
	--dp04: rgba(@color, 0.09);
	--dp06: rgba(@color, 0.11);
	--dp08: rgba(@color, 0.12);
	--dp12: rgba(@color, 0.14);
	--dp16: rgba(@color, 0.15);
	--dp24: rgba(@color, 0.16);
}

.emph(@color) {
	--emph-high: rgba(@color, 0.87);
	--emph-medium: rgba(@color, 0.6);
	--disabled: rgba(@color, 0.38);
}

body {
	color: var(--emph-high);
	background-color: var(--background);
}
